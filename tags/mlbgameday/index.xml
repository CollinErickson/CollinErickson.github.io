<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mlbgameday on Collin Erickson</title>
    <link>/tags/mlbgameday/</link>
    <description>Recent content in Mlbgameday on Collin Erickson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/mlbgameday/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Expected runs for every game state</title>
      <link>/2019/05/11/expected-runs-for-every-game-state/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/11/expected-runs-for-every-game-state/</guid>
      <description>A state in a baseball game is defined by the number outs and which bases have baserunners.We could include the count, inning, etc, but we’re starting with the simplest version.For a given state, there is an expected number of runs a team would score inthe remainder of that inning.These tables are readily available online.I want to try to recreate the tables using data from mlbgameday package.</description>
    </item>
    
    <item>
      <title>BABIP part 2</title>
      <link>/2019/05/09/babip-part-2/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/09/babip-part-2/</guid>
      <description>Last time I looked into BABIP to see if pitchers could control it.I want to check a couple of more things.
I’m getting the same data as last time.
library(mlbgameday)library(magrittr)library(ggplot2)library(dplyr)## ## Attaching package: &amp;#39;dplyr&amp;#39;## The following objects are masked from &amp;#39;package:stats&amp;#39;:## ## filter, lag## The following objects are masked from &amp;#39;package:base&amp;#39;:## ## intersect, setdiff, setequal, union# Takes hours to get all the data for the yeardat &amp;lt;- get_payload(start = &amp;quot;2018-01-01&amp;quot;, end = &amp;quot;2018-12-31&amp;quot;)Get pitcher names from at bat data.</description>
    </item>
    
    <item>
      <title>BABIP</title>
      <link>/2019/05/07/babip/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/07/babip/</guid>
      <description>Recently I was reading about pitchers having no control over results of a ball in play.This is the main idea behind FIP/DIPS.This goes against the common idea that pitchers can be good if they induce weak contact.I’m going to investigate this in this post.
Similar to last time, I’m using the same data from mlbgameday.
library(mlbgameday)library(magrittr)library(ggplot2)library(dplyr)## ## Attaching package: &amp;#39;dplyr&amp;#39;## The following objects are masked from &amp;#39;package:stats&amp;#39;:## ## filter, lag## The following objects are masked from &amp;#39;package:base&amp;#39;:## ## intersect, setdiff, setequal, unionGet data.</description>
    </item>
    
    <item>
      <title>Swings and Misses</title>
      <link>/2019/05/06/swings-and-misses/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/06/swings-and-misses/</guid>
      <description>I going to work more with data from mlbgameday.
library(mlbgameday)library(magrittr)library(ggplot2)library(dplyr)## ## Attaching package: &amp;#39;dplyr&amp;#39;## The following objects are masked from &amp;#39;package:stats&amp;#39;:## ## filter, lag## The following objects are masked from &amp;#39;package:base&amp;#39;:## ## intersect, setdiff, setequal, unionGet data.
# Takes hours to get all the data for the yeardat &amp;lt;- get_payload(start = &amp;quot;2018-01-01&amp;quot;, end = &amp;quot;2018-12-31&amp;quot;)Get pitcher names from at bat data.</description>
    </item>
    
    <item>
      <title>Using mlbgameday to see what pitches get hit</title>
      <link>/2019/04/29/using-mlbgameday-to-see-what-pitches-get-hit/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/29/using-mlbgameday-to-see-what-pitches-get-hit/</guid>
      <description>Load packages
library(mlbgameday)library(dplyr)## ## Attaching package: &amp;#39;dplyr&amp;#39;## The following objects are masked from &amp;#39;package:stats&amp;#39;:## ## filter, lag## The following objects are masked from &amp;#39;package:base&amp;#39;:## ## intersect, setdiff, setequal, unionlibrary(ggplot2)library(magrittr)Get data. Using arbitrary dates.
dat &amp;lt;- get_payload(start = &amp;quot;2018-08-01&amp;quot;, end = &amp;quot;2018-08-31&amp;quot;)## Gathering Gameday data, please be patient...## Warning: executing %dopar% sequentially: no parallel backend registeredThis siteis useful for deciphering fields.</description>
    </item>
    
    <item>
      <title>Looking at pitches with the R package mlbgameday</title>
      <link>/2019/03/19/looking-at-pitches-with-the-r-package-mlbgameday/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/03/19/looking-at-pitches-with-the-r-package-mlbgameday/</guid>
      <description>I’ll be continuing on from the last post.
Load packages first.
library(mlbgameday)library(dplyr)## ## Attaching package: &amp;#39;dplyr&amp;#39;## The following objects are masked from &amp;#39;package:stats&amp;#39;:## ## filter, lag## The following objects are masked from &amp;#39;package:base&amp;#39;:## ## intersect, setdiff, setequal, unionlibrary(ggplot2)library(magrittr)Get some data.
dat &amp;lt;- get_payload(start = &amp;quot;2018-08-22&amp;quot;, end = &amp;quot;2018-08-22&amp;quot;)## Gathering Gameday data, please be patient...## Warning: executing %dopar% sequentially: no parallel backend registeredWe’re going to be looking at dat$pitch.</description>
    </item>
    
    <item>
      <title>Getting started with R package mlbgameday</title>
      <link>/2019/03/18/getting-started-with-r-package-mlbgameday/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/03/18/getting-started-with-r-package-mlbgameday/</guid>
      <description>I’m going to start digging into baseball statistics.There are a couple of R packages that facilitate the collecting of datafrom MLB.I’ll be using the R package mlbgameday, mostly because I saw that it wasrecently updated.
Getting some dataFirst we load the package.Along with a couple of other of packages that we’ll need.
library(mlbgameday)library(dplyr)## ## Attaching package: &amp;#39;dplyr&amp;#39;## The following objects are masked from &amp;#39;package:stats&amp;#39;:## ## filter, lag## The following objects are masked from &amp;#39;package:base&amp;#39;:## ## intersect, setdiff, setequal, unionlibrary(ggplot2)library(magrittr)Now we’ll grab some data.</description>
    </item>
    
  </channel>
</rss>